// <auto-generated />
using System;
using LoveAndPets.Domain.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace LoveAndPets.Migrations
{
    [DbContext(typeof(AnimalDbContext))]
    [Migration("20201115111055_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("LoveAndPets.Domain.Model.Common.Animals", b =>
                {
                    b.Property<long>("Entitys")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnName("TypeName")
                        .HasColumnType("text");

                    b.HasKey("Entitys")
                        .HasAnnotation("Npgsql:Serial", true);

                    b.ToTable("Animal");
                });

            modelBuilder.Entity("LoveAndPets.Domain.Model.Common.Breeds", b =>
                {
                    b.Property<long>("Entitys")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("AnimalsEntitys")
                        .HasColumnName("AnimalId")
                        .HasColumnType("bigint");

                    b.Property<string>("BreedName")
                        .IsRequired()
                        .HasColumnName("BreedName")
                        .HasColumnType("text");

                    b.HasKey("Entitys")
                        .HasAnnotation("Npgsql:Serial", true);

                    b.HasIndex("AnimalsEntitys");

                    b.ToTable("Breed");
                });

            modelBuilder.Entity("LoveAndPets.Domain.Model.Common.Doctors", b =>
                {
                    b.Property<long>("Entitys")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .HasColumnType("text");

                    b.Property<long>("ServicesEntitys")
                        .HasColumnName("ServiceId")
                        .HasColumnType("bigint");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnName("Surname")
                        .HasColumnType("text");

                    b.HasKey("Entitys")
                        .HasAnnotation("Npgsql:Serial", true);

                    b.HasIndex("ServicesEntitys");

                    b.ToTable("Doctor");
                });

            modelBuilder.Entity("LoveAndPets.Domain.Model.Common.Employee", b =>
                {
                    b.Property<long>("Entitys")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnName("Surname")
                        .HasColumnType("text");

                    b.HasKey("Entitys")
                        .HasAnnotation("Npgsql:Serial", true);

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("LoveAndPets.Domain.Model.Common.Notes", b =>
                {
                    b.Property<long>("Entitys")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DateAppointment")
                        .HasColumnName("DateAppointment")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("DoctorsEntitys")
                        .HasColumnName("DoctorId")
                        .HasColumnType("bigint");

                    b.Property<long>("EmployeeEntitys")
                        .HasColumnName("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("PetsEntitys")
                        .HasColumnName("PetId")
                        .HasColumnType("bigint");

                    b.HasKey("Entitys")
                        .HasAnnotation("Npgsql:Serial", true);

                    b.HasIndex("DoctorsEntitys");

                    b.HasIndex("EmployeeEntitys");

                    b.HasIndex("PetsEntitys");

                    b.ToTable("Note");
                });

            modelBuilder.Entity("LoveAndPets.Domain.Model.Common.Pets", b =>
                {
                    b.Property<long>("Entitys")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("AnimalsEntitys")
                        .HasColumnName("AnimalId")
                        .HasColumnType("bigint");

                    b.Property<long>("BreedsEntitys")
                        .HasColumnName("BreedId")
                        .HasColumnType("bigint");

                    b.Property<long>("EmployeeEntitys")
                        .HasColumnName("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("PetName")
                        .IsRequired()
                        .HasColumnName("PetName")
                        .HasColumnType("text");

                    b.HasKey("Entitys")
                        .HasAnnotation("Npgsql:Serial", true);

                    b.HasIndex("AnimalsEntitys");

                    b.HasIndex("BreedsEntitys");

                    b.HasIndex("EmployeeEntitys");

                    b.ToTable("Pet");
                });

            modelBuilder.Entity("LoveAndPets.Domain.Model.Common.Services", b =>
                {
                    b.Property<long>("Entitys")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnName("ServiceName")
                        .HasColumnType("text");

                    b.HasKey("Entitys")
                        .HasAnnotation("Npgsql:Serial", true);

                    b.ToTable("Service");
                });

            modelBuilder.Entity("LoveAndPets.Domain.Model.Common.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<long>("EmployeeEntitys")
                        .HasColumnType("bigint");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("EmployeeEntitys")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("LoveAndPets.Domain.Model.Common.Breeds", b =>
                {
                    b.HasOne("LoveAndPets.Domain.Model.Common.Animals", "Animals")
                        .WithMany()
                        .HasForeignKey("AnimalsEntitys")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LoveAndPets.Domain.Model.Common.Doctors", b =>
                {
                    b.HasOne("LoveAndPets.Domain.Model.Common.Services", "Services")
                        .WithMany()
                        .HasForeignKey("ServicesEntitys")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LoveAndPets.Domain.Model.Common.Notes", b =>
                {
                    b.HasOne("LoveAndPets.Domain.Model.Common.Doctors", "Doctors")
                        .WithMany()
                        .HasForeignKey("DoctorsEntitys")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LoveAndPets.Domain.Model.Common.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeEntitys")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LoveAndPets.Domain.Model.Common.Pets", "Pets")
                        .WithMany()
                        .HasForeignKey("PetsEntitys")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LoveAndPets.Domain.Model.Common.Pets", b =>
                {
                    b.HasOne("LoveAndPets.Domain.Model.Common.Animals", "Animals")
                        .WithMany()
                        .HasForeignKey("AnimalsEntitys")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LoveAndPets.Domain.Model.Common.Breeds", "Breeds")
                        .WithMany()
                        .HasForeignKey("BreedsEntitys")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LoveAndPets.Domain.Model.Common.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeEntitys")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LoveAndPets.Domain.Model.Common.User", b =>
                {
                    b.HasOne("LoveAndPets.Domain.Model.Common.Employee", "Employee")
                        .WithOne()
                        .HasForeignKey("LoveAndPets.Domain.Model.Common.User", "EmployeeEntitys")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("LoveAndPets.Domain.Model.Common.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("LoveAndPets.Domain.Model.Common.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LoveAndPets.Domain.Model.Common.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("LoveAndPets.Domain.Model.Common.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
